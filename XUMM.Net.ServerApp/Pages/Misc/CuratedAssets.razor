@page "/curatedassets"
@using XUMM.Net.Clients.Interfaces
@using XUMM.Net.Models.Misc

@inject IXummMiscClient _miscClient

<PageTitle>Curated Assets</PageTitle>

<h1>Curated Assets</h1>

@if (_details != null)
{
    if (_details.Any())
    {
        <div class="alert alert-success" role="alert">
            <h4 class="alert-heading">Retrieved curated assets!</h4>
            Response Time: @_responseTime ms
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Currencies</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var assetDetails in _details.OrderBy(x => x.Name))
                {
                    <tr>
                        <th scope="row">@assetDetails.Id</th>
                        <td>@assetDetails.Name</td>
                        <td>@string.Join(", ", assetDetails.Currencies.Select(x=>x.Key).OrderBy(x=>x))</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No curated assets found!</h4>
            Response Time: @_responseTime ms
        </div>
    }
}
else
{
    <div class="btn-group" role="group">
        <button class="btn btn-primary" @onclick="GetCuratedAssetsAsync">Get Curated Assets</button>
    </div>
}

@code {
    private List<XummCuratedAssetsDetails>? _details;
    private double? _responseTime;

    private async Task GetCuratedAssetsAsync()
    {
        var start = DateTime.UtcNow;
        var result = await _miscClient.GetCuratedAssetsAsync();
        _details = new List<XummCuratedAssetsDetails>(result.Details.Values);
        _responseTime = Math.Round((DateTime.UtcNow - start).TotalMilliseconds);
    }
}
