@page "/storage"
@using XUMM.Net.Clients.Interfaces
@using XUMM.Net.ServerApp.Extensions

@inject IXummMiscAppStorageClient _miscAppStorageClient

<PageTitle>Storage</PageTitle>

<ResponseAlertBox @ref="_responseAlertBox"></ResponseAlertBox>

<h1>Storage</h1>

<div class="row align-items-start">
    <div class="col-md-6">
        <div class="mb-3">
            <label for="json" class="form-label">JSON data</label>
            <textarea id="json" class="form-control" placeholder="JSON" aria-label="Currency" aria-describedby="basic-addon2" @bind="_json"></textarea>
        </div>

        <div class="btn-group mb-3" role="group">
            <button class="btn btn-primary" type="button" @onclick="StoreAsync">Save</button>
            <button class="btn btn-secondary" @onclick="ClearAsync">Clear</button>
        </div>
    </div>
    <div class="col-md-6">
        @if (_storedData != null)
        {
            <div class="alert alert-dark" role="alert">
            <code>@_storedData</code>
            </div>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                <h4 class="alert-heading">Storage</h4>
                No JSON data stored
            </div>
        }
    </div>
</div>

@code {
    private ResponseAlertBox _responseAlertBox = default!;
    private string? _json;
    private object? _storedData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetStorageAsync();
        }
    }

    private async Task GetStorageAsync()
    {
        var storage = await _miscAppStorageClient.GetAsync();
        _storedData = storage?.Data?.ToJsonString();
        StateHasChanged();
    }

    private async Task StoreAsync()
    {
        if (string.IsNullOrWhiteSpace(_json))
        {
            return;
        }

        var storageStore = await _responseAlertBox.GetResponseAndSetAlertAsync(() => _miscAppStorageClient.StoreAsync(_json));
        var success = storageStore?.Stored ?? false;
        _responseAlertBox.SetAlert("Storage Result", success);

        if (success)
        {
            _json = null;
            await GetStorageAsync();
        }
    }

    private async Task ClearAsync()
    {
        var storageStore = await _responseAlertBox.GetResponseAndSetAlertAsync(() => _miscAppStorageClient.ClearAsync());
        var success = storageStore?.Stored ?? false;
        _responseAlertBox.SetAlert("Storage Cleared Result", success);

        if (success)
        {
            await GetStorageAsync();
        }
    }
}
